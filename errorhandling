// SPDX-License-Identifier: MIT
pragma solidity ^0.8.18;

contract ErrorHandlingContract {
    uint256 public totalBalance;
    mapping(address => uint256) public balances;

    function deposit() public payable {
        require(msg.value > 0, "Deposit amount must be greater than zero.");
        balances[msg.sender] += msg.value;
        totalBalance += msg.value;
    }

    function withdraw(uint256 amount) public {
        require(amount <= balances[msg.sender], "Insufficient balance.");
        
        uint256 previousBalance = balances[msg.sender];
        balances[msg.sender] -= amount;
        totalBalance -= amount;
        
        assert(balances[msg.sender] <= previousBalance);
    }

    function transfer(address to, uint256 amount) public {
        require(to != address(0), "Invalid address.");
        require(amount <= balances[msg.sender], "Insufficient balance.");
        
        balances[msg.sender] -= amount;
        balances[to] += amount;
    }

    function cancelTransaction() public pure {
        bool someCondition = false;

        if (!someCondition) {
            revert("Transaction cancelled due to some condition.");
        }
    }
}
